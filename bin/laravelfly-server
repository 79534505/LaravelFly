#!/usr/bin/env php
<?php

$project_root_dir = realpath(__DIR__ . '/../../../..');

function start($config_file)
{
    global $project_root_dir;
    include $project_root_dir . '/vendor/autoload.php';

    LaravelFlyServer::getInstance(
        $project_root_dir,
        require $config_file
    )
        ->start();

}

function get_pid()
{
    global $project_root_dir;

    $pid_file = isset($argv[2]) && is_file($argv[2]) ? $argv[2] : $project_root_dir . '/vendor/bin/laravelfly.pid';

    try {
        $pid = (int)file_get_contents($pid_file);
    } catch (Exception $e) {
        die("pid can not be read from $pid_file");
    }

    return $pid;

}

function stop($pid)
{
    if (class_exists('swoole_process')) {
        if (swoole_process::kill($pid, 0)) {
            swoole_process::kill($pid);
        }
    } else {
        system("kill -15 $pid");
    }
}

function reload($pid)
{
    system("kill -USR1 $pid");
}

function restart($pid)
{
    $server_config_file = system("ps -f -p $pid | awk 'END{print \$11}'");
    if (!$server_config_file) {
        global $project_root_dir;
        $server_config_file = $project_root_dir . '/laravelfly.server.php';
    }
    stop($pid);
    start($server_config_file);
}

$options = ['start', 'stop', 'reload', 'restart'];

if ($argc == 1) {
    die('[ERROR] supply an option: ' . implode('|', $options) . PHP_EOL);
}

switch ($argv[1]) {
    case 'start':
        start(isset($argv[1]) && is_file($argv[1]) ? $argv[1] : $project_root_dir . '/laravelfly.server.php');
        break;
    default:
        if (in_array($argv[1], $options))
            $argv[1](get_pid());
}
